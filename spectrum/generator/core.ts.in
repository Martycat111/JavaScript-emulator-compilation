#alloc frameBuffer[0x6600]: u8
export const FRAME_BUFFER:usize = (&frameBuffer);

// allocate memory for 8 RAM, 8 ROM pages
// 0..7 - 128K RAM pages;
// 8 = 128 rom 0, 9 = 128 rom 1
// 10 = 48 rom, 11 = scratch area for ROM writes
// 12 = Pentagon rom 0 (Pentagon ROM 1 is identical to 128 rom 1)
// 13 = TRDOS rom
#alloc machineMemory[0x40000]: u8
export const MACHINE_MEMORY:usize = (&machineMemory);

#alloc memoryPageReadMap[4]: u8
#alloc memoryPageWriteMap[4]: u8
export const MEMORY_PAGE_READ_MAP:usize = (&memoryPageReadMap);
export const MEMORY_PAGE_WRITE_MAP:usize = (&memoryPageWriteMap);

#alloc pageIsContended[12]: u8
pageIsContended = [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0];

#regpair AF A F
export const REGISTERS:usize = (&AF);
#regpair BC B C
#regpair DE D E
#regpair HL H L
#regpair AF_
#regpair BC_
#regpair DE_
#regpair HL_
#regpair IX IXH IXL
#regpair IY IYH IYL
#regpair SP
#regpair IR I R

#const FLAG_C 0x01
#const FLAG_N 0x02
#const FLAG_P 0x04
#const FLAG_V 0x04
#const FLAG_3 0x08
#const FLAG_H 0x10
#const FLAG_5 0x20
#const FLAG_Z 0x40
#const FLAG_S 0x80

#alloc halfcarryAddTable[8]: u8
halfcarryAddTable = [0, FLAG_H, FLAG_H, FLAG_H, 0, 0, 0, FLAG_H];

#alloc halfcarrySubTable[8]: u8
halfcarrySubTable = [0, 0, FLAG_H, 0, FLAG_H, 0, FLAG_H, FLAG_H];

#alloc overflowAddTable[8]: u8
overflowAddTable = [0, 0, 0, FLAG_V, FLAG_V, 0, 0, 0];
#alloc overflowSubTable[8]: u8
overflowSubTable = [0, FLAG_V, 0, 0, 0, 0, FLAG_V, 0];

#alloc sz53Table[0x100]: u8
#alloc parityTable[0x100]: u8
#alloc sz53pTable[0x100]: u8

#alloc contentionTable[72000]: u8

#alloc screenEvents[36000]: u32

#alloc keyStates[8]: u8

// NB needs to start at an offset that's a multiple of 4
#alloc audioBufferLeft[1024]: f32
export const AUDIO_BUFFER_LEFT:usize = (&audioBufferLeft);
#alloc audioBufferRight[1024]: f32
export const AUDIO_BUFFER_RIGHT:usize = (&audioBufferLeft);

#alloc tapePulses[10000]: u16
export const TAPE_PULSES:usize = (&tapePulses);
export const TAPE_PULSES_LENGTH:usize = 10000;

#alloc ayVolumeLevels[16]: f32
ayVolumeLevels = [0.0, 0.0022915, 0.0034105, 0.004842, 0.007057, 0.010307, 0.0141195, 0.0228165, 0.028188, 0.04411, 0.058784, 0.0749885, 0.0950615, 0.114544, 0.1413585, 0.166662];

#alloc logEntries[2048]: u16
export const LOG_ENTRIES:usize = (&logEntries);

#alloc ayRegisters[14]: u8

let requestedSamplesPerFrame:u32 = 0;
let samplesPerFrame:u32 = 0;
let ayCyclesPerSample:f64 = 0.0;
let lastAudioT:u32 = 0;  // the t on which we last called updateAudioBuffer
let microslicesSinceLastSample:u32 = 0;
let audioBufferPointer:u32 = 0;

// which pages in memory bank correspond to roms 0 and 1 in paging
let rom0Page:u8 = 8;
let rom1Page:u8 = 9;

let betadiskEnabled:bool = false;
let betadiskROMActive:bool = false;
let tapeTrapsEnabled:bool = true;

let i:u8 = 0;
while (true) {
    sz53Table[i] = u8(i) & ( FLAG_3 | FLAG_5 | FLAG_S );
    let j = i;
    let parity:u8 = 0;
    for (let k:i8 = 0; k < 8; k++) {
        parity ^= j & 1;
        j >>= 1;
    }

    parityTable[i] = (parity ? 0 : FLAG_P);
    sz53pTable[i] = sz53Table[i] | parityTable[i];

    sz53Table[0] |= FLAG_Z;
    sz53pTable[0] |= FLAG_Z;
    i++;
    if (i == 0) break;
}


function buildScreenEventsTable(mainScreenStartTstate:u32, tstatesPerRow:u32, borderTimeMask:u32):void {
    /* build screen events table: a list of which screen bytes should be fetched on which
    t-states. A sequence of: two u32s per event:
    - tstate number or 0xffffffff for end marker
    - screen address offset | (attr address offset << 16),
    or 0xffffffff if this is a 'fetch border' event
    */
    let screenEventPointer:u32 = 0;

    /* top border */
    for (let y:u32 = 0; y < 24; y++) {
        const rowTime:u32 = mainScreenStartTstate - (24 - y) * tstatesPerRow - 16;
        for (let x:u32 = 0; x < 160; x++) {
            screenEvents[screenEventPointer++] = rowTime + (x & borderTimeMask);
            screenEvents[screenEventPointer++] = 0xffffffff;
        }
    }

    for (let y:u32 = 0; y < 192; y++) {
        const rowTime:u32 = mainScreenStartTstate + tstatesPerRow * y;
        const rowScreenOffset:u32 = ((y & 0xc0) << 5) | ((y & 0x07) << 8) | ((y & 0x38) << 2);
        const rowAttrOffset:u32 = 0x1800 | ((y & 0xf8) << 2);

        /* left border */
        for (let x:u32 = 0; x < 16; x++) {
            screenEvents[screenEventPointer++] = rowTime - 16 + (x & borderTimeMask);
            screenEvents[screenEventPointer++] = 0xffffffff;
        }

        /* main screen */
        for (let x:u32 = 0; x < 16; x++) {
            screenEvents[screenEventPointer++] = rowTime + 8 * x;
            const screenOffset:u32 = rowScreenOffset | (x << 1);
            const attrOffset:u32 = rowAttrOffset | (x << 1);
            screenEvents[screenEventPointer++] = screenOffset | (attrOffset << 16);
        }

        /* right border */
        for (let x:u32 = 0; x < 16; x++) {
            screenEvents[screenEventPointer++] = rowTime + 128 + (x & borderTimeMask);
            screenEvents[screenEventPointer++] = 0xffffffff;
        }
    }

    /* bottom border */
    for (let y:u32 = 0; y < 24; y++) {
        const rowTime:u32 = mainScreenStartTstate + (192 + y) * tstatesPerRow - 16;
        for (let x:u32 = 0; x < 160; x++) {
            screenEvents[screenEventPointer++] = rowTime + (x & borderTimeMask);
            screenEvents[screenEventPointer++] = 0xffffffff;
        }
    }

    // add end marker
    screenEvents[screenEventPointer] = 0xffffffff;
}


function buildContentionTable(mainScreenStartTstate:u32, tstatesPerRow:u32, frameCycleCount:u32):void {
    let pos:u32 = 0;
    while (pos < mainScreenStartTstate) {
        contentionTable[pos++] = 0;
    }
    for (let y:u32 = 0; y < 192; y++) {
        for (let x:u32 = 0; x < tstatesPerRow; x++) {
            if (x < 128) {
                const seq:u32 = x & 0x07;
                contentionTable[pos++] = u8((seq == 7) ? 0 : (6 - seq));
            } else {
                contentionTable[pos++] = 0;
            }
        }
    }
    while (pos < frameCycleCount) {
        contentionTable[pos++] = 0;
    }
}


function clearContentionTable(frameCycleCount:u32):void {
    for (let i:u32 = 0; i < frameCycleCount; i++) {
        contentionTable[i] = 0;
    }
}


let frameCycleCount:u32 = 69888;
let screenPageIndex:u32 = 5;
let pagingLocked:bool = 0;
let t:u32 = 0;
let pc:u16 = 0;
let iff1:bool = 0;
let iff2:bool = 0;
let im:u8 = 0;
let interruptible:bool = false;
let halted:bool = false;
let opcodePrefix:u8 = 0;
let framebufferIndex = 0;
let borderColour:u8 = 0;
let speakerState:u8 = 0;
let selectedAYRegister:u8 = 0;
let floatingBusValue:u8 = 0xff;
let currentTapeTime:u32 = 0;  // time at which tape pulse pointer was last updated
let tapePulseReadIndex:u16 = 0;  // index into the tape pulses buffer for the current pulse
let tapePulseWriteIndex:u16 = 0;
let tapePulseBufferTstateCount:u32 = 0;  // total number of tstates of all pulses in the buffer
let tapePulseCyclesElapsed:u32 = 0;  // number of cycles of the current pulse that have elapsed
let tapeLevel:u8 = 0x00;

// whether a trap on the next instruction will be honoured
let willTrap:bool = true;

let loggingEnabled:bool = false;
let logPtr = 0;

let machineType:u32 = 48;
export function setMachineType(type:u32):void {
    machineType = type;
    if (type == 48 || type == 1212) {
        frameCycleCount = 69888;
        recalculateAYCyclesPerSample();
        buildScreenEventsTable(14335, 224, 0xfc);
        buildContentionTable(14335, 224, frameCycleCount);
        betadiskEnabled = false;
    } else if (type == 5) {  // pentagon
        frameCycleCount = 71680;
        recalculateAYCyclesPerSample();
        buildScreenEventsTable(17988, 224, 0xff);
        clearContentionTable(frameCycleCount);
        rom0Page = 12;
        rom1Page = 9;
        betadiskEnabled = true;
        betadiskROMActive = false;
    } else {  // 128
        frameCycleCount = 70908;
        recalculateAYCyclesPerSample();
        buildScreenEventsTable(14361, 228, 0xfc);
        buildContentionTable(14361, 228, frameCycleCount);
        rom0Page = 8;
        rom1Page = 9;
        betadiskEnabled = false;
    }
    reset();
}
export function reset():void {
    if (machineType == 48) {
        memoryPageReadMap = [10, 5, 2, 0];
        memoryPageWriteMap = [11, 5, 2, 0];
        pagingLocked = 1;
    } else if (machineType == 1212) {
        // 1212 = test machine type with writeable ROM
        memoryPageReadMap = [10, 5, 2, 0];
        memoryPageWriteMap = [10, 5, 2, 0];
        pagingLocked = 1;
    } else if (machineType == 5) {
        // Pentagon
        memoryPageReadMap = [12, 5, 2, 0];
        memoryPageWriteMap = [11, 5, 2, 0];
        pagingLocked = 0;
    } else {  // 128
        memoryPageReadMap = [8, 5, 2, 0];
        memoryPageWriteMap = [11, 5, 2, 0];
        pagingLocked = 0;
    }
    for (let i:u8 = 0; i < 14; i++) {
        writeAYRegister(i, 0);
    }
    screenPageIndex = 5;
    t = 0;
    pc = 0;
    iff1 = iff2 = 0;
    im = 0;
    interruptible = false;
    halted = false;
    opcodePrefix = 0;
    framebufferIndex = 0;
}
setMachineType(48);

for (let i=0; i < 8; i++) {
    keyStates[i] = 0xff;
}

export function setRegisters(af:u16, bc:u16, de:u16, hl:u16, af_:u16, bc_:u16, de_:u16, hl_:u16, ix:u16, iy:u16, sp:u16, ir:u16):void {
    AF = af;
    BC = bc;
    DE = de;
    HL = hl;
    AF_ = af_;
    BC_ = bc_;
    DE_ = de_;
    HL_ = hl_;
    IX = ix;
    IY = iy;
    SP = sp;
    IR = ir;
}

export function setPC(val:u16):void {
    pc = val;
}
export function getPC():u16 {
    return pc;
}
export function setIFF1(val:bool):void {
    iff1 = val;
}
export function getIFF1():bool {
    return iff1;
}
export function setIFF2(val:bool):void {
    iff2 = val;
}
export function getIFF2():bool {
    return iff2;
}
export function setIM(val:u8):void {
    im = val;
}
export function getIM():u8 {
    return im;
}
export function setTStates(val:u32):void {
    t = val;
}
export function getTStates():u32 {
    return t;
}
export function setHalted(val:bool):void {
    halted = val;
}
export function getHalted():bool {
    return halted;
}
export function setTapeTraps(val:bool):void {
    tapeTrapsEnabled = val;
}

function log(time:u32, type:u16, addr:u16, val:u8):void {
    logEntries[logPtr++] = u16(time);
    logEntries[logPtr++] = type;
    logEntries[logPtr++] = addr;
    logEntries[logPtr++] = u16(val);
    logPtr = logPtr % 2048;
}

export function startLog():void {
    loggingEnabled = true;
    logPtr = 0;
}
export function stopLog():void {
    log(0xffff, 0xffff, 0, 0);
    loggingEnabled = false;
}

export function setAudioSamplesPerFrame(val:u32):void {
    requestedSamplesPerFrame = val;
}
export function getAudioSamplesPerFrame():u32 {
    return samplesPerFrame;
}
export function getTapePulseWriteIndex():u16 {
    return tapePulseWriteIndex;
}
export function getTapePulseBufferTstateCount():u32 {
    return tapePulseBufferTstateCount;
}
export function setTapePulseBufferState(writeIndex: u16, tstateCount:u32):void {
    tapePulseWriteIndex = writeIndex;
    tapePulseBufferTstateCount = tstateCount;
}

function readMem(addr:u16):u8 {
    const page:u8 = memoryPageReadMap[addr >> 14];
    const pageOffset:u32 = u32(page) << 14;
    if (loggingEnabled) log(t, 3, addr, 0);
    if (pageIsContended[page]) t += contentionTable[t % frameCycleCount];
    t += 3;
    if (loggingEnabled) {
        const val:u8 = machineMemory[pageOffset | (addr & 0x3fff)];
        log(t, 1, addr, val);
        return val;
    } else {
        return machineMemory[pageOffset | (addr & 0x3fff)];
    }
}

function readMemInternal(addr:u16):u8 {
    const page:u8 = memoryPageReadMap[addr >> 14];
    const pageStartPtr:u32 = u32(page) << 14;
    if (loggingEnabled) {
        const val:u8 = machineMemory[pageStartPtr | (addr & 0x3fff)];
        log(t, 1, addr, val);
        return val;
    } else {
        return machineMemory[pageStartPtr | (addr & 0x3fff)];
    }
}

function writeMem(addr:u16, val:u8):void {
    const page:u8 = memoryPageWriteMap[addr >> 14];
    const pageStartPtr:u32 = u32(page) << 14;
    if (loggingEnabled) log(t, 3, addr, 0);
    if (pageIsContended[page]) t += contentionTable[t % frameCycleCount];
    const pageOffset:u16 = addr & 0x3fff;
    if (page == screenPageIndex && pageOffset < 0x1b00) {
        updateFramebuffer();
    }
    machineMemory[pageStartPtr | pageOffset] = val;
    t += 3;
    if (loggingEnabled) {
        log(t, 2, addr, val);
    }
}

function contendRead(addr:u16):void {
    const page:u8 = memoryPageReadMap[addr >> 14];
    if (loggingEnabled) log(t, 3, addr, 0);
    if (pageIsContended[page]) t += contentionTable[t % frameCycleCount];
}
function contendDirtyRead(addr:u16):void {
    const page:u8 = memoryPageReadMap[addr >> 14];
    if (loggingEnabled) log(t, 3, addr, 0);
    if (pageIsContended[page]) t += contentionTable[t % frameCycleCount];
}
function contendDirtyWrite(addr:u16):void {
    const page:u8 = memoryPageWriteMap[addr >> 14];
    if (loggingEnabled) log(t, 3, addr, 0);
    if (pageIsContended[page]) t += contentionTable[t % frameCycleCount];
}

export function peek(addr:u16):u8 {
    const pageOffset:u32 = u32(memoryPageReadMap[addr >> 14]) << 14;
    return machineMemory[pageOffset | (addr & 0x3fff)];
}
export function poke(addr:u16, val:u8):void {
    const pageOffset:u32 = u32(memoryPageWriteMap[addr >> 14]) << 14;
    machineMemory[pageOffset | (addr & 0x3fff)] = val;
}

export function readPort(addr:u16):u8 {
    /* apply pre-read contention */
    const page:u8 = memoryPageReadMap[addr >> 14];
    const addressIsContended:u8 = pageIsContended[page];
    if (addressIsContended) {
        if (loggingEnabled) log(t, 6, addr, 0);
        t += contentionTable[t % frameCycleCount];
    }
    t++;

    let result:u8 = 0xff;
    if (machineType == 1212) {
        /*
        on port reads, the test machine just responds with the high byte of the port address.
        That's a thing now, I decided. (Well, Phil Kendall decided it to be exact.)
        */
        result = u8(addr >> 8);
    } else {

        if (!(addr & 0x0001)) {
            /* poll keyboard */
            result = pollKeyboard(u8(addr >> 8));
            updateTapePulses(t);
            result |= tapeLevel;
        } else if ((addr & 0xc002) == 0xc000) {
            result = readAYRegister(selectedAYRegister);
        } else if (!(addr & 0x00e0)) {
            /* kempston joystick */
            result = 0;
        } else if (machineType == 48 || machineType == 128) {
            /* floating bus */
            updateFramebuffer();
            result = floatingBusValue;
        }
    }
    if (loggingEnabled) log(t, 4, addr, result);

    /* apply post-read contention */
    if (addr & 0x0001) {
        if (addressIsContended) {
            if (loggingEnabled) log(t, 6, addr, 0);
            t += contentionTable[t % frameCycleCount];
            t++;
            if (loggingEnabled) log(t, 6, addr, 0);
            t += contentionTable[t % frameCycleCount];
            t++;
            if (loggingEnabled) log(t, 6, addr, 0);
            t += contentionTable[t % frameCycleCount];
            t++;
        } else {
            t += 3;
        }
    } else {
        if (loggingEnabled) log(t, 6, addr, 0);
        t += contentionTable[t % frameCycleCount];
        t += 3;
    }

    return result;
}

export function writePort(addr:u16, val:u8):void {
    /* apply pre-write contention */
    const page:u8 = memoryPageWriteMap[addr >> 14];
    const addressIsContended:u8 = pageIsContended[page];
    if (addressIsContended) {
        if (loggingEnabled) log(t, 6, addr, 0);
        t += contentionTable[t % frameCycleCount];
    }
    t++;

    if (loggingEnabled) log(t, 5, addr, val);
    if (!(addr & 0x0001)) {
        /* border colour / speaker */
        updateFramebuffer();  // apply all screen upates up to this point
        updateAudioBuffer(t);
        borderColour = val & 0x07;
        speakerState = (val & 0x10) >> 4;
    } else if (!(addr & 0x8002)) {
        /* 128/+2 paging */
        if (!pagingLocked) {

            updateFramebuffer();  // so that screen switching happens at the right position

            memoryPageReadMap[3] = val & 0x07;
            memoryPageWriteMap[3] = val & 0x07;
            screenPageIndex = (val & 0x08) ? 7 : 5;
            memoryPageReadMap[0] = (val & 0x10) ? rom1Page : rom0Page;
            pagingLocked = bool(val & 0x20);
        }
    } else if ((addr & 0xc002) == 0xc000) {
        selectedAYRegister = val;
    } else if ((addr & 0xc002) == 0x8000) {
        updateAudioBuffer(t);
        writeAYRegister(selectedAYRegister, val);
    }

    /* apply post-write contention */
    if (addr & 0x0001) {
        if (addressIsContended) {
            if (loggingEnabled) log(t, 6, addr, 0);
            t += contentionTable[t % frameCycleCount];
            t++;
            if (loggingEnabled) log(t, 6, addr, 0);
            t += contentionTable[t % frameCycleCount];
            t++;
            if (loggingEnabled) log(t, 6, addr, 0);
            t += contentionTable[t % frameCycleCount];
            t++;
        } else {
            t += 3;
        }
    } else {
        if (loggingEnabled) log(t, 6, addr, 0);
        t += contentionTable[t % frameCycleCount];
        t += 3;
    }

}

let screenEventPointer:u32 = 0;

function updateFramebuffer():void {
    /* process all of the screen bytes that are due up to the current tstate */
    const screenBaseAddr:u32 = screenPageIndex << 14;

    // end marker is 0xffffffff, which will always be greater than t
    while (screenEvents[screenEventPointer] <= t) {
        const addressWord:u32 = screenEvents[screenEventPointer + 1];
        if (addressWord == 0xffffffff) {
            frameBuffer[framebufferIndex++] = borderColour;
            floatingBusValue = 0xff;
        } else {
            const screenAddr:u32 = screenBaseAddr | (addressWord & 0xffff);
            const attributeAddr:u32 = screenBaseAddr | (addressWord >> 16);
            frameBuffer[framebufferIndex++] = machineMemory[screenAddr];
            frameBuffer[framebufferIndex++] = machineMemory[attributeAddr];
            frameBuffer[framebufferIndex++] = machineMemory[screenAddr + 1];
            floatingBusValue = machineMemory[attributeAddr + 1];
            frameBuffer[framebufferIndex++] = floatingBusValue;
        }
        screenEventPointer += 2;
    }
}

function updateAudioBuffer(targetTime:u32):void {
    /* Fill the audio buffer up to the given target tstate number, using the current state
    of the speaker and AY, and fetching new tape pulses as required. */

    updateTapePulses(targetTime);
    updateAudioBufferInner(targetTime);
}

function updateAudioBufferInner(targetTime:u32):void {
    /* Fill the audio buffer up to the given target tstate number, using the current state
    of the speaker, AY and tape. targetTime is chosen to be a small enough increment that
    no changes of state (including new tape pulses) occur in this timespan. */
    microslicesSinceLastSample += (targetTime - lastAudioT) * samplesPerFrame;
    while (microslicesSinceLastSample >= frameCycleCount) {
        const speakerLevel:f32 = (speakerState ? 0.5 : 0.0) + (tapeLevel ? 0.25 : 0.0);

        toneGeneratorACounter -= ayCyclesPerSample;
        while (toneGeneratorACounter < 0) {
            toneGeneratorACounter += toneGeneratorAPeriod;
            toneGeneratorAPhase ^= 0xff;
        }

        toneGeneratorBCounter -= ayCyclesPerSample;
        while (toneGeneratorBCounter < 0) {
            toneGeneratorBCounter += toneGeneratorBPeriod;
            toneGeneratorBPhase ^= 0xff;
        }

        toneGeneratorCCounter -= ayCyclesPerSample;
        while (toneGeneratorCCounter < 0) {
            toneGeneratorCCounter += toneGeneratorCPeriod;
            toneGeneratorCPhase ^= 0xff;
        }

        noiseGeneratorCounter -= ayCyclesPerSample;
        while (noiseGeneratorCounter < 0) {
            noiseGeneratorCounter += noiseGeneratorPeriod;

            if ((noiseGeneratorSeed + 1) & 2)
                noiseGeneratorPhase ^= 0xff;

            /* rng is 17-bit shift reg, bit 0 is output.
            * input is bit 0 xor bit 3.
            */
            if (noiseGeneratorSeed & 1) noiseGeneratorSeed ^= 0x24000;
            noiseGeneratorSeed >>= 1;
        }

        envelopeCounter -= ayCyclesPerSample;
        while (envelopeCounter < 0) {
            envelopeCounter += envelopePeriod;

            envelopeRampCounter--;
            if (envelopeRampCounter == 0xff) {
                envelopeRampCounter = 15;
                envelopeOnFirstRamp = false;
                envelopeAlternatePhase ^= 0x0f;
            }

            envelopeValue = (
                /* start with the descending ramp counter */
                envelopeRampCounter
                /* XOR with the 'alternating' bit if on an even-numbered ramp */
                ^ (envelopeAlternatePhase && envelopeAlternateMask)
            );
            /* OR with the 'hold' bit if past the first ramp */
            if (!envelopeOnFirstRamp) envelopeValue |= envelopeHoldMask;
            /* XOR with the 'attack' bit */
            envelopeValue ^= envelopeAttackMask;
            /* AND with the 'continue' bit if past the first ramp */
            if (!envelopeOnFirstRamp) envelopeValue &= envelopeContinueMask;
        }

        const finalVolumeA:u8 = (
            ((volumeA & 0x10) ? envelopeValue : (volumeA & 0x0f))
            & (toneGeneratorAPhase | toneChanAMask)
            & (noiseGeneratorPhase | noiseChanAMask)
        );
        const finalVolumeB:u8 = (
            ((volumeB & 0x10) ? envelopeValue : (volumeB & 0x0f))
            & (toneGeneratorBPhase | toneChanBMask)
            & (noiseGeneratorPhase | noiseChanBMask)
        );
        const finalVolumeC:u8 = (
            ((volumeC & 0x10) ? envelopeValue : (volumeC & 0x0f))
            & (toneGeneratorCPhase | toneChanCMask)
            & (noiseGeneratorPhase | noiseChanCMask)
        );
        const levelA:f32 = ayVolumeLevels[finalVolumeA];
        const levelB:f32 = ayVolumeLevels[finalVolumeB];
        const levelC:f32 = ayVolumeLevels[finalVolumeC];

        audioBufferLeft[audioBufferPointer] = speakerLevel * 0.70711 + levelA * 0.86603 + levelB * 0.5 + levelC * 0.70711;
        audioBufferRight[audioBufferPointer] = speakerLevel * 0.70711 + levelA * 0.5 + levelB * 0.86603 + levelC * 0.70711;
        audioBufferPointer = (audioBufferPointer + 1) & 0x03ff;
        microslicesSinceLastSample -= frameCycleCount;
    }
    lastAudioT = targetTime;
}

function updateTapePulses(targetTime:u32): void {
    while (targetTime > currentTapeTime) {
        if (tapePulseReadIndex == tapePulseWriteIndex) {
            updateAudioBufferInner(currentTapeTime);
            tapeLevel = 0;
            currentTapeTime = targetTime;
            return;
        }

        const pulseData = tapePulses[tapePulseReadIndex];
        tapeLevel = u8((pulseData & 0x8000) >> 9);
        const pulseLength = u32(pulseData & 0x7fff);
        const remainingPulseCycles = pulseLength - tapePulseCyclesElapsed;
        const pulseEndTime = currentTapeTime + remainingPulseCycles;
        if (pulseEndTime <= targetTime) {
            // finish this pulse and move to next
            updateAudioBufferInner(pulseEndTime);
            currentTapeTime = pulseEndTime;
            tapePulseReadIndex++;
            tapePulseCyclesElapsed = 0;
        } else {
            // target time is within this pulse; update cycles elapsed accordingly
            const cyclesToAdvance = targetTime - currentTapeTime;
            tapePulseCyclesElapsed += cyclesToAdvance;
            currentTapeTime = targetTime;
        }
    }
}

export function keyDown(row:u8, mask:u8):void {
    keyStates[row] = keyStates[row] & ~mask;
}
export function keyUp(row:u8, mask:u8):void {
    keyStates[row] = keyStates[row] | mask;
}

function pollKeyboard(addr:u8):u8 {
    let result:u8 = 0xbf;
    for (let row:u8 = 0; row < 8; row++) {
        if (!(addr & (1<<row))) {
            /* scan this row */
            result &= keyStates[row];
        }
    }
    return result;
}

function recalculateAYCyclesPerSample():void {
    ayCyclesPerSample = 0.5 * f64(frameCycleCount) / f64(samplesPerFrame);
}

/* status codes returned from runFrame / resumeFrame:
0 = OK (end of frame)
1 = unrecognised opcode (should never happen...)
*/


export function runFrame():i16 {
    screenEventPointer = 0;
    framebufferIndex = 0;

    if (requestedSamplesPerFrame != samplesPerFrame) {
        samplesPerFrame = requestedSamplesPerFrame;
        recalculateAYCyclesPerSample();
        audioBufferPointer = 0;
        lastAudioT = 0;
    } else {
        /* copy any excess samples from previous frame's buffer */
        for (i = 0; i < audioBufferPointer; i++) {
            audioBufferLeft[i] = audioBufferLeft[samplesPerFrame + i];
            audioBufferRight[i] = audioBufferRight[samplesPerFrame + i];
        }
    }

    currentTapeTime = 0;

    return resumeFrame();
}

export function resumeFrame():i16 {
    const status = runUntil(frameCycleCount);
    if (status) {
        // a non-zero status indicates we've broken out of the frame prematurely
        // and will need to resume it with resumeFrame.
        // When we do, a trap on the next instruction back will not be honoured
        // (so that it's possible for the trap to leave pc unchanged without putting us
        // in an infinite loop).
        willTrap = false;
        return status;
    }

    updateFramebuffer();
    updateAudioBuffer(t);

    if (tapePulseWriteIndex > tapePulseReadIndex) {
        // copy excess from tape pulse buffer to start of buffer
        const excessPulses:u16 = tapePulseWriteIndex - tapePulseReadIndex;
        for (let i:u16 = 0; i < excessPulses; i++) {
            if (i == 0) {
                tapePulses[0] = tapePulses[tapePulseReadIndex] - u16(tapePulseCyclesElapsed);
                tapePulseCyclesElapsed = 0;
            } else {
                tapePulses[i] = tapePulses[tapePulseReadIndex + i];
            }
        }
        tapePulseReadIndex = 0;
        tapePulseWriteIndex = excessPulses;
        tapePulseBufferTstateCount -= t;
    } else {
        tapePulseReadIndex = 0;
        tapePulseWriteIndex = 0;
        tapePulseCyclesElapsed = 0;
        tapePulseBufferTstateCount = 0;
    }

    t -= frameCycleCount;
    lastAudioT -= frameCycleCount;
    audioBufferPointer -= samplesPerFrame;

    return 0;
}

export function runUntil(maxT:u32):i16 {
    while (t < maxT || opcodePrefix) {
        if (t < 36 && iff1 && interruptible) {
            /* process interrupt */

            if (halted) {
                // move PC on from the HALT opcode
                pc++;
                halted = 0;
            }

            iff1 = iff2 = 0;

            /* push current PC in readiness for call to interrupt handler */
            let sp = SP;
            sp--;
            writeMem(sp, u8(pc >> 8));
            sp--;
            writeMem(sp, u8(pc & 0xff));
            SP = sp;

            if (im == 1) {
                pc = 0x0038;
                t += 7;
            } else if (im == 2) {
                const intVector:u16 = (u16(I) << 8) | 0xff;
                const lo:u16 = u16(readMem(intVector));
                const hi:u16 = u16(readMem(intVector + 1));
                pc = (lo | (hi << 8));
                t += 7;
            } else { /* im == 0 */
                pc = 0x0038;
                t += 6;
            }
        }

        if (
            (pc == 0x056b || pc == 0x0111)
            && (memoryPageReadMap[0] == 9 || memoryPageReadMap[0] == 10)
            && tapeTrapsEnabled && willTrap
        ) {
            // tape loading trap
            return 2;
        }
        willTrap = true;

        if (betadiskEnabled) {
            if ((pc & 0xff00) == 0x3d00 && !betadiskROMActive && memoryPageReadMap[0] == rom1Page) {
                betadiskROMActive = true;
                memoryPageReadMap[0] = 13;
            } else if (pc >= 0x4000 && betadiskROMActive) {
                betadiskROMActive = false;
                memoryPageReadMap[0] = rom1Page;
            }
        }

        interruptible = true; // unless overridden by opcode
        if (opcodePrefix == 0) {
            contendRead(pc);
            t += 4;
            let op:u8 = readMemInternal(pc++);

            const r = R;
            R = (r & 0x80) | ((r + 1) & 0x7f);

            switch (op) {
                #optable base

                default:
                    return 1;  /* unrecognised opcode */
            }
        } else if (opcodePrefix == 0xcb) {
            opcodePrefix = 0;  // for the next instruction (unless overridden)
            contendRead(pc);
            t += 4;
            let op:u8 = readMemInternal(pc++);

            const r = R;
            R = (r & 0x80) | ((r + 1) & 0x7f);

            switch (op) {
                #optable cb

                default:
                    return 1;  /* unrecognised opcode */
            }
        } else if (opcodePrefix == 0xdd) {
            opcodePrefix = 0;  // for the next instruction (unless overridden)
            contendRead(pc);
            t += 4;
            let op:u8 = readMemInternal(pc++);

            const r = R;
            R = (r & 0x80) | ((r + 1) & 0x7f);

            switch (op) {
                #optable dd

                default:
                    return 1;  /* unrecognised opcode */
            }
        } else if (opcodePrefix == 0xdc) {  // ddcb
            opcodePrefix = 0;  // for the next instruction (unless overridden)
            const indexOffset:i8 = i8(readMem(pc++));
            let op:u8 = readMem(pc++);
            switch (op) {
                #optable ddcb

                default:
                    return 1;  /* unrecognised opcode */
            }
        } else if (opcodePrefix == 0xed) {
            opcodePrefix = 0;  // for the next instruction (unless overridden)
            contendRead(pc);
            t += 4;
            let op:u8 = readMemInternal(pc++);

            const r = R;
            R = (r & 0x80) | ((r + 1) & 0x7f);

            switch (op) {
                #optable ed

                default:
                    return 1;  /* unrecognised opcode */
            }
        } else if (opcodePrefix == 0xfd) {
            opcodePrefix = 0;  // for the next instruction (unless overridden)
            contendRead(pc);
            t += 4;
            let op:u8 = readMemInternal(pc++);

            const r = R;
            R = (r & 0x80) | ((r + 1) & 0x7f);

            switch (op) {
                #optable fd

                default:
                    return 1;  /* unrecognised opcode */
            }
        } else if (opcodePrefix == 0xfc) {  // fdcb
            opcodePrefix = 0;  // for the next instruction (unless overridden)
            const indexOffset:i8 = i8(readMem(pc++));
            let op:u8 = readMem(pc++);
            switch (op) {
                #optable fdcb

                default:
                    return 1;  /* unrecognised opcode */
            }
        }
    }

    return 0;
}


/* AY chip state */
let toneGeneratorAPhase:u8 = 0;
let toneGeneratorAPeriod:f64 = 8;
let toneGeneratorACounter:f64 = 0;

let toneGeneratorBPhase:u8 = 0;
let toneGeneratorBPeriod:f64 = 8;
let toneGeneratorBCounter:f64 = 0;

let toneGeneratorCPhase:u8 = 0;
let toneGeneratorCPeriod:f64 = 8;
let toneGeneratorCCounter:f64 = 0;

let noiseGeneratorPhase:u8 = 0;
let noiseGeneratorPeriod:f64 = 16;
let noiseGeneratorCounter:f64 = 0;
let noiseGeneratorSeed:u32 = 1;

let toneChanAMask:u8 = 0x00;
let toneChanBMask:u8 = 0x00;
let toneChanCMask:u8 = 0x00;
let noiseChanAMask:u8 = 0x00;
let noiseChanBMask:u8 = 0x00;
let noiseChanCMask:u8 = 0x00;

let envelopePeriod:f64 = 256;
let envelopeCounter:f64 = 0;
let envelopeRampCounter:u8 = 16;
let envelopeOnFirstRamp:bool = true;
let envelopeAlternateMask:u8 = 0x00;
let envelopeAlternatePhase:u8 = 0x00;
let envelopeHoldMask:u8 = 0x00;
let envelopeAttackMask:u8 = 0x00;
let envelopeContinueMask:u8 = 0x00;
let envelopeValue:u8 = 0x00;

let volumeA:u8 = 0x00;
let volumeB:u8 = 0x00;
let volumeC:u8 = 0x00;

function readAYRegister(reg:u8):u8 {
    if (reg < 14) {
        return ayRegisters[reg];
    } else {
        return 0x00;
    }
}

function writeAYRegister(reg:u8, val:u8):void {
    if (reg < 14) {
        ayRegisters[reg] = val;
    }

    switch(reg) {
        case 0:
        case 1:
            toneGeneratorAPeriod = f64((((ayRegisters[1] & 0x0f) << 8) | ayRegisters[0]) * 8);
            if (toneGeneratorAPeriod === 0) toneGeneratorAPeriod = 8;
            break;
        case 2:
        case 3:
            toneGeneratorBPeriod = f64((((ayRegisters[3] & 0x0f) << 8) | ayRegisters[2]) * 8);
            if (toneGeneratorBPeriod === 0) toneGeneratorBPeriod = 8;
            break;
        case 4:
        case 5:
            toneGeneratorCPeriod = f64((((ayRegisters[5] & 0x0f) << 8) | ayRegisters[4]) * 8);
            if (toneGeneratorCPeriod === 0) toneGeneratorCPeriod = 8;
            break;
        case 6:
            noiseGeneratorPeriod = f64((val & 0x1f) << 4);
            if (noiseGeneratorPeriod === 0) noiseGeneratorPeriod = 16;
            break;
        case 7:
            toneChanAMask = (val & 0x01) ? 0xff : 0x00;
            toneChanBMask = (val & 0x02) ? 0xff : 0x00;
            toneChanCMask = (val & 0x04) ? 0xff : 0x00;
            noiseChanAMask = (val & 0x08) ? 0xff : 0x00;
            noiseChanBMask = (val & 0x10) ? 0xff : 0x00;
            noiseChanCMask = (val & 0x20) ? 0xff : 0x00;
            break;
        case 8:
            volumeA = val;
            break;
        case 9:
            volumeB = val;
            break;
        case 10:
            volumeC = val;
            break;
        case 11:
        case 12:
            envelopePeriod = f64(((ayRegisters[12] << 8) | ayRegisters[11]) << 4);
            if (envelopePeriod === 0) envelopePeriod = 16;
            break;
        case 13:
            envelopeCounter = 0;
            envelopeRampCounter = 16;
            envelopeOnFirstRamp = true;
            envelopeAlternatePhase = 0x00;
            envelopeHoldMask = (val & 0x01) ? 0x0f : 0x00;
            envelopeAlternateMask = (val & 0x02) ? 0x0f : 0x00;
            envelopeAttackMask = (val & 0x04) ? 0x0f : 0x00;
            envelopeContinueMask = (val & 0x08) ? 0x0f : 0x00;
            break;
    }
}
